#include<bits/stdc++.h>
#define INF 1e8
using namespace std;
struct Edge
{
    int src, dest, weight;
};
struct Graph
{
    int V, E;
    struct Edge* edge;
};
struct Graph* createGraph(int V, int E)
{
    struct Graph* graph = (struct Graph*) malloc( sizeof(struct Graph) );
    graph->V = V;
    graph->E = E;
    graph->edge = (struct Edge*) malloc( graph->E * sizeof( struct Edge ) );
    return graph;
}
void BellmanFord(struct Graph* graph, int src)
{
    int V = graph->V;
    int E = graph->E;
    int dist[V];
    for (int i = 0; i < V; i++) dist[i] = INF;
    dist[src] = 0;
    //Relax all edges |V| - 1 times. A simple shortest path from src
    // to any other vertex can have at-most |V| - 1 edges
    for (int i = 1; i <= V-1; i++)
    {
        for (int j = 0; j < E; j++)
        {
            int u = graph->edge[j].src;
            int v = graph->edge[j].dest;
            int weight = graph->edge[j].weight;
            if (dist[u] + weight < dist[v])
                dist[v] = dist[u] + weight;
        }
    }
    //check for negative-weight cycles.  The above step guarantees
    // shortest distances if graph doesn't contain negative weight cycle.
    // If we get a shorter path, then there is a cycle.
    for (int i = 0; i < E; i++)
    {
        int u = graph->edge[i].src;
        int v = graph->edge[i].dest;
        int weight = graph->edge[i].weight;
        if (dist[u] + weight < dist[v]) cout << "Graph contains negative weight cycle";
    }
    cout <<"Vertex   Distance from Source" <<endl;
    for (int i = 0; i < V; ++i) cout << i <<"\t\t"<<dist[i]<<endl;
}
int main()
{
    int V,E;
    cin >> V >>E;
    struct Graph* graph = createGraph(V, E);
    for(int i=0;i<E;i++){
        cin >> graph->edge[i].src;
        cin >> graph->edge[i].dest;
        cin >> graph->edge[i].weight;
    }
    BellmanFord(graph, 0);
    return 0;
}
/*sample input output
4 5
0 1 10
0 2 2
2 1 3
2 3 15
1 3 4
Vertex   Distance from Source
0                0
1                5
2                2
3                9
*/
