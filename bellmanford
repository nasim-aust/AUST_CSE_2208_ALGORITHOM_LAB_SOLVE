#include <bits/stdc++.h>
using namespace std;
#define INT_ 555555
struct edge{
    int from;
    int to;
    int weight;
};
int a[100][100];
int dist[100];
bool cmp(edge e1, edge e2){
    return e1.weight<e2.weight;
}
int p[100];
int parent(int n){
    if(p[n]!= n){
        return parent(p[n]);
    }
    return n;
}
void uni(int a, int b){
    p[parent(a)] = parent(b);
}

int main()
{
    int V = 5;
    edge e[6];
    e[0].from = 0;
    e[0].to = 1;
    e[0].weight = 1;
    e[1].from = 1;
    e[1].to = 3;
    e[1].weight = 10;
    e[2].from = 1;
    e[2].to = 2;
    e[2].weight = 3;
    e[3].from = 2;
    e[3].to = 3;
    e[3].weight = 2;
    e[4].from = 2;
    e[4].to = 4;
    e[4].weight = 40;
    e[5].from = 0;
    e[5].to = 4;
    e[5].weight = 20;
    for(int i = 0; i <=V; i++){
        for(int j = 0; j <=V; j++){
            a[i][j] = INT_;
        }
    }
    for(int i = 0; i <6; i++){
        p[i] = i;
    }

    a[0][1] = 1;
    a[1][3] = 10;
    a[1][2] = 3;
    a[2][3] = 2;
    a[2][4] = 4;
    a[0][4] = 20;
    sort(e, e+6, cmp);
    for(int i = 0; i <6; i++){
            if(parent(e[i].from) !=parent(e[i].to)){
                    cout<<e[i].weight<<" ";
                    uni(e[i].from, e[i].to);
            }
    }
    /*
    for(int i = 0; i <=V; i++){
        dist[i] = INT_;
    }
    dist[0] = 0;
    dist[1] = 1;
    dist[4] = 20;

    for(int i = 0; i <=V-1; i++){
        for(int j = 0;j <6; j++){
            if(dist[e[j].to] > a[e[j].from][e[j].to] + dist[e[j].from]){
                dist[e[j].to] = a[e[j].from][e[j].to] + dist[e[j].from];
            }
        }
    }
    for(int i = 0; i <V; i++){
        cout<<i<<" = "<<dist[i]<<" "<<endl;
    }
    */
    return 0;
}
