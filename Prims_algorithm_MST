//prims algorithm-MST using matrix
//time complexity O(n*n)
#include<bits/stdc++.h>
#define INF 1e9
#define MAXM 100
using namespace std;

int G[MAXM][MAXM],spanning[MAXM][MAXM],n;

int prims()
{
    int cost[MAXM][MAXM];
    int u,v,min_distance,distance[MAXM],from[MAXM];
    int visited[MAXM],no_of_edges,i,min_cost,j;

    //create cost[][] matrix,spanning[][]
    for(i=0;i<n;i++)
        for(j=0;j<n;j++)
        {
            if(G[i][j]==0)
                cost[i][j]=INF;
            else
                cost[i][j]=G[i][j];
                spanning[i][j]=0;
        }

    //initialize visited[],distance[] and from[]
    distance[0]=0;
    visited[0]=1;

    for(i=1;i<n;i++)
    {
        distance[i]=cost[0][i];
        from[i]=0;
        visited[i]=0;
    }

    min_cost=0;        //cost of spanning tree
    no_of_edges=n-1;        //no. of edges to be added

    while(no_of_edges>0)
    {
        //find the vertex at minimum distance from the tree
        min_distance=INF;
        for(i=1;i<n;i++)
            if(visited[i]==0&&distance[i]<min_distance)
            {
                v=i;
                min_distance=distance[i];
            }
        u=from[v];

        //insert the edge in spanning tree
        spanning[u][v]=distance[v];
        spanning[v][u]=distance[v];
        no_of_edges--;
        visited[v]=1;

        //updated the distance[] array
        for(i=1;i<n;i++)
            if(visited[i]==0&&cost[i][v]<distance[i])
            {
                distance[i]=cost[i][v];
                from[i]=v;
            }
        min_cost=min_cost+cost[u][v];
    }
    return(min_cost);
}

int main()
{
    int i,j,total_cost;
    cout <<"Enter the vertices :";
    cin >>n;
    cout <<"The matrix : " <<endl;
    for(i=0;i<n;i++) for(j=0;j<n;j++) cin >> G[i][j];

    total_cost=prims();
    //cout <<"Spanning tree matrix :" <<endl;

    /*for(i=0;i<n;i++)
    {
        for(j=0;j<n;j++) cout <<spanning[i][j]<<" ";
            cout <<endl;
    }*/
    cout << "MST is : "<<total_cost<<endl;
    return 0;
}
/*
Enter the vertices :6
The matrix :
0 3 1 6 0 0
3 0 5 0 3 0
1 5 0 5 6 4
6 0 5 0 0 2
0 3 6 0 0 6
0 0 4 2 6 0
MST is : 13
*/
